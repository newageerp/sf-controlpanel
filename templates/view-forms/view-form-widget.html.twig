import { WhiteCard } from '@newageerp/ui.cards.base.white-card';
import { CardWidgetTitle } from '@newageerp/ui.cards.base.card-widget-title'
import React, { Fragment } from 'react'
import { use{{ hookSchemaName }}HookNae } from '../../../Components/Hooks/use{{ hookSchemaName }}HookNae'
import { PropsId } from '../../../UserComponents/ModelsCacheData/types'
import { SquareButton } from '@newageerp/ui.buttons.base.square-button'
import { IconType } from '@newageerp/ui.icons.base.icon';
import { IconList } from '@newageerp/ui.icons.base.icon-list';
import { TwTextColors } from '@newageerp/ui.styles.tailwind';
import {{ compName }} from '../forms/{{ compName }}';
import { UI } from '@newageerp/nae-react-ui';

interface WidgetProps {
    element: {
        id: number
    },
    options: any,
}

export function {{ compName }}WidgetWidget(props: WidgetProps) {
    return <{{ compName }}Widget id={props.element.id} {...props.options}/>
}

interface Props extends PropsId {
    title?: string,
    onEdit?: () => void,
    contentBeforeForm?: any,
    contentAfterForm?: any,
}

export default function {{ compName }}Widget(props: Props) {
    const element = use{{ hookSchemaName }}HookNae(props.id);

    const { showEditPopup } = UI.Window.useNaeWindow();
    const openEditWindow = {% if editForm != "" %}() => showEditPopup({
        schema: '{{ schema }}',
        type: '{{ editForm }}',
        id: props.id,
    });{% else %}undefined;{% endif %}

    const onEdit = props.onEdit ? props.onEdit : openEditWindow;

    if (!element) {
        return <Fragment />
    }

    const title = props.title?props.title:"{{ title }}";

    return (
        <WhiteCard>
            {(!!title || onEdit) &&
                <div className='flex gap-2 items-center'>
                    {!!title &&
                        <CardWidgetTitle className='flex-grow'>{title}</CardWidgetTitle>
                    }
                    {!!onEdit &&
                        <SquareButton
                            bgColor={"transparent"}
                            onClick={onEdit}
                            icon={
                            {
                                type: IconType.SolidButton,
                                icon: IconList.edit,
                                className: TwTextColors.slate400,
                            }
                            }

                        />
                    }
                </div>
            }

            {props.contentBeforeForm}

            <{{ compName }} element={element} />

            {props.contentAfterForm}
        </WhiteCard>
    )
}
