import { OpenApi } from '@newageerp/nae-react-auth-wrapper';
import React, { useEffect, useState } from 'react'
import { BrowserRouter as Router, Switch } from 'react-router-dom';
import { Redirect, useLocation } from 'react-router-dom'
import axios from 'axios'
import { useRecoilState } from 'recoil';

export interface AppRouterRoute {
    path: string
    comp: any,
    exact?: boolean
}

export interface AppRouterProps {
    noAuthRoutes?: any,
    authRoutes?: any,
    children?: any
}

export default function AppRouter(props: AppRouterProps) {
    const [isUserDataLoading, setIsUserDataLoading] = useState(true);

    const getUserData = () => {
        axios.post('/app/nae-core/auth/get').then(res => {
            if (res.status === 200) {
                setUserState(res.data)
            }
            setIsUserDataLoading(false);
        }).catch(e => {
            setIsUserDataLoading(false);
        });
    }

    const [userState, setUserState] = useRecoilState(OpenApi.naeUserState)

    const [loadData, loadDataParams] = OpenApi.useURequest('NAEPing');
    useEffect(() => {
        loadData();
    }, []);

    useEffect(getUserData, [])

    const isLoggedIn = !!userState && ('id' in userState);

    if (loadDataParams.loading || loadDataParams.data.data.length === 0 || isUserDataLoading) {
        return <div>Loading...</div>
    }

    return (
        <Router>
            <Switch>
                {props.noAuthRoutes}
                {isLoggedIn && props.authRoutes}
                {props.children}
            </Switch>
        </Router>
    )
}
