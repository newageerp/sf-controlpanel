import React, {Fragment} from 'react';
import { Wide, WideToolbar, WideRow, Compact, CompactToolbar, CompactRow, Label } from '@newageerp/ui.form.base.form-pack';
import { useTranslation } from 'react-i18next'
{{ TP_IMPORT|raw }}

interface Props {
    element: any;
    onChange: (key: string, value: any) => void,
    compact?: boolean,

    onSave: () => void,
    onCancel: () => void,
}

export default function {{ TP_COMP_NAME }}(props: Props) {
    const { element, onChange } = props;
    const { t } = useTranslation();

    if (props.compact) {
        return (
            <Compact>
                {% for stepRows in rows %}
                    {% for row in stepRows %}
                        {% set colsLength = row|length %}
                        {% if colsLength > 1 %}
                            <div className="flex items-center justify-start gap-4">
                        {% endif %}
                        {% for field in row %}
                            {{ field.c|raw }}
                        {% endfor %}
                        {% if colsLength > 1 %}
                            </div>
                        {% endif %}
                    {% endfor %}
                {% endfor %}
                <CompactToolbar onSave={props.onSave} onCancel={props.onCancel} />
            </Compact>
        )
    }

    const wideGroups : any = {};
    const withoutSteps = {{ rows|length == 1 }};

    {% for stepKey, stepRows in rows %}
        wideGroups['{{ stepKey }}'] = (
            <Wide>
                {% for row in stepRows %}
                    {% set colsLength = row|length %}
                    {% if colsLength > 1 %}
                        <div className="flex items-center justify-start gap-4">
                    {% endif %}
                    {% for field in row %}
                        {{ field.w|raw }}
                    {% endfor %}
                    {% if colsLength > 1 %}
                        </div>
                    {% endif %}
                {% endfor %}
                
            </Wide>
        );
    {% endfor %}


    return (<Wide>
        {withoutSteps && wideGroups['-']}
        <WideToolbar onSave={props.onSave} onCancel={props.onCancel} />
    </Wide>)
}