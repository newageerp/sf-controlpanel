import React, { Fragment, useEffect, useState } from 'react'
import moment from 'moment'

import { useLocation } from 'react-router-dom'
import { useTranslation } from 'react-i18next'

import { isMobile } from 'react-device-detect'
import { functions, UI, UIConfig } from '@newageerp/nae-react-ui'
import { INaeEditField, INaeEditSettings, INaeFormEditRow, INaeProperty } from '@newageerp/nae-react-ui/dist/interfaces'
import { EditHeaderType } from '@newageerp/nae-react-ui/dist/UI/Mvc/MvcEditPage'
import MainEditWrapper from './MainEditWrapper'

interface Props {
  schema: string
  type: string
  id: string

  header: EditHeaderType

  onSave?: (el: any, backFunc: any) => void
  onSaveAndStay?: (el: any, backFunc: any) => void

  onBack?: (isNew: boolean, el?: any) => void

  newStateOptions?: any

  parentElement?: any

  skipHiddenCheck?: boolean
  compact?: boolean
  saveOnBottom?: boolean,
  contentWrap?: any

  fieldsToReturnOnSave?: string[]

  editContainerClassName?: string,
}

export default function MainEdit(props: Props) {
  let hiddenFields: any = []
  const { t } = useTranslation()
  const location = useLocation<any>()
  const locationState = location.state

  const isCompact = isMobile || props.compact

  const [saveData, saveDataParams] = UIConfig.useUSave(
    props.schema,
    props.fieldsToReturnOnSave ? props.fieldsToReturnOnSave : ['id']
  )

  // WORKFLOW
  const [hasChanges, setHasChanges] = useState(false)
  const [element, setElement] = useState<any>(null)

  const updateElement = (key: string, val: any) => {
    let _el = JSON.parse(JSON.stringify(element))
    if (val !== _el[key]) {
      setHasChanges(true)
      _el[key] = val

      _el = UIConfig.onEditElementUpdate(props.schema, key, val, _el, updateElement)

      setElement(_el)
    }
  }
  const updateElementBatch = (updates: any) => {
    let _el = JSON.parse(JSON.stringify(element))
    let _hasChanges = false
    Object.keys(updates).forEach((k: string) => {
      if (updates[k] !== _el[k]) {
        _hasChanges = true
        _el[k] = updates[k]

        _el = UIConfig.onEditElementUpdate(props.schema, k, updates[k], _el, updateElement)
      }
    })

    if (_hasChanges) {
      setHasChanges(true)
      setElement(_el)
    }
  }

  const doSave = () => {
    if (saveDataParams.loading) {
      return
    }
    const isNew = props.id === 'new'
    setHasChanges(false)
    saveData(element, props.id).then((res: any) => {
      if (res) {
        if (res.error) {
        } else {
          const backFunction = () => {
            if (props.onBack) {
              props.onBack(isNew, res.data.element)
            }
          }
          if (props.onSave) {
            props.onSave(res.data.element, backFunction)
          } else {
            backFunction()
          }
        }
      }
    })
  }

  const doSaveAndStay = () => {
    if (saveDataParams.loading) {
      return
    }
    const isNew = props.id === 'new'
    setHasChanges(false)
    saveData(element, props.id).then((res: any) => {
      if (res) {
        if (res.error) {
        } else {
          const backFunction = () => {
            if (props.onBack) {
              props.onBack(isNew, res.data.element)
            }
          }
          if (props.onSaveAndStay) {
            props.onSaveAndStay(res.data.element, backFunction)
          } else {
            backFunction()
          }
        }
      }
    })
  }

  const editSettings = functions.fields.getEditFieldsForSchema(props.schema, props.type)
  const editFields: INaeEditSettings = editSettings
    ? editSettings
    : { fields: [], schema: '', type: '' }
  let fieldsToReturn: string[] = functions.viewTransform.getElementFieldsToReturn(
    editFields,
    (key: string) => UIConfig.getDepenciesForField(props.schema, key)
  )

  const [schemaGetData, schemaGetDataParams] = UIConfig.useUList(
    props.schema,
    fieldsToReturn
  )
  const getData = () => {
    if (props.id === 'new') {
      schemaGetData(
        { empty: true },
        1,
        1,
        undefined,
        undefined,
        props.newStateOptions ? props.newStateOptions : locationState
      )
    } else {
      schemaGetData([{ and: [['i.id', 'eq', props.id, true]] }], 1, 1)
    }
  }
  useEffect(getData, [])

  useEffect(() => {
    if (schemaGetDataParams.data.records === 1) {
      setElement(schemaGetDataParams.data.data[0])
    }
  }, [schemaGetDataParams.data.data])

  const transformEditValue = (
    field: INaeEditField,
    element: any,
    property: INaeProperty | null
  ) => {
    const labelSize = field.labelClassName
      ? field.labelClassName
      : isCompact
        ? 'w-full'
        : 'w-56'
    const controlSize = field.inputClassName
      ? field.inputClassName
      : isCompact
        ? 'w-full'
        : 'w-96'

    const required = functions.schemas.getSchemaRequired(props.schema)

    const fieldVisibility = UIConfig.fieldVisibility()

    const propertyKey = property ? property.key : 'no-key'
    const _schema = props.schema

    const fVisibility =
      propertyKey &&
        !!fieldVisibility[_schema] &&
        !!fieldVisibility[_schema][propertyKey]
        ? fieldVisibility[_schema][propertyKey]
        : null
    if (
      !props.skipHiddenCheck &&
      !!fVisibility &&
      fVisibility({
        _schema,
        element,
        user: UIConfig.userState,
        parentElement: props.parentElement,
        hasChanges,
        updateElement,
        type: props.type,
        isEdit: true
      })
    ) {
      if (property && property.key) {
        hiddenFields.push(property.key)
      }
      return <Fragment />
    }

    if (!!field.custom && field.custom.customRender && !!property) {
      return field.custom.customRender({
        // @ts-ignore
        field: field,
        element: element,
        property: property,
        schema: property.schema,
        updateElement: updateElement
      })
    } else if (field.type === 'custom') {
      return UIConfig.parseCustomField(element, updateElement, field)
    } else if (
      property &&
      !!field.key &&
      field.type !== 'separator' &&
      field.type !== 'label' &&
      field.type !== 'hint' &&
      field.type !== 'tagCloud'
    ) {
      let control = null
      let contentValue = field.key in element ? element[field.key] : ''
      const propertyType = functions.properties.getPropertyNaeType(property)

      if (field.type === 'status' || property.as === 'status') {
        const activeStatuses = UIConfig.statuses().filter(
          (s) => s.type === property.key && s.schema === property.schema
        )

        control = (
          <UI.Form.Select
            value={contentValue}
            onChange={(e: any) => updateElement(property.key, e)}
            options={activeStatuses.map((s) => {
              return {
                label: s.text,
                value: s.status
              }
            })}
            className={controlSize}
          />
        )
      } else if (
        property.type === 'array' &&
        property.format === 'number' &&
        !!property.as &&
        property.as.indexOf('entity:') === 0
      ) {
        const propertyAs = property.as.split(':')

        let extraFilter = undefined
        if (!!field.extraFilter) {
          extraFilter = field.extraFilter(element, field.key)
        }
        const tab = functions.tabs.getTabFromSchemaAndType(propertyAs[1], 'main')

        control = (
          <UI.Form.SelectMulti
            value={contentValue}
            onChange={(e) => updateElement(property.key, e)}
            className={controlSize}
            // @ts-ignore
            schema={propertyAs[1]}
            tab={tab}
            fieldKey={propertyAs[2]}
            fieldKeyExtraSelect={field.relKeyExtraSelect}
            extraFilter={extraFilter}
          />
        )
      } else if (property.as === 'color') {
        control = (
          <UI.Form.ColorPicker
            value={contentValue}
            setValue={(e) => updateElement(property.key, e)}
            className={controlSize}
          />
        )
      } else if (property.as === 'file') {
        control = (
          <UI.Form.FileField
            val={contentValue}
            onChange={(e) => updateElement(property.key, e)}
            property={property}
          />
        )
      } else if (property.as === 'fileMultiple') {
        control = (
          <UI.Form.FileFieldMultiple
            val={contentValue}
            onChange={(e) => updateElement(property.key, e)}
            property={property}
          />
        )
      } else if (propertyType === 'object' && property.as === 'select') {
        let extraFilter = undefined
        if (!!field.extraFilter) {
          extraFilter = field.extraFilter(element, field.key)
        }
        const tab = functions.tabs.getTabFromSchemaAndType(
          property.format ? property.format : '',
          'main'
        )

        contentValue = field.key ? element[field.key] : { id: 0 }

        control = (
          <UI.Form.SelectFromSchema
            value={contentValue}
            onChange={(e) => updateElement(property.key, e)}
            className={controlSize}
            schema={property.format ? property.format : ''}
            tab={tab}
            fieldKey={field.relKey}
            fieldKeyExtraSelect={field.relKeyExtraSelect}
            extraFilter={extraFilter}
          />
        )
      } else if (propertyType === 'object') {
        let extraFilter = undefined
        if (!!field.extraFilter) {
          extraFilter = field.extraFilter(element, field.key)
        } else if (field.fieldDependency) {
          const depend = field.fieldDependency.replace("?", "").split(':')
          const dependKey = depend[1].split('.')

          if (element[dependKey[0]]) {
            extraFilter = {
              and: [[depend[0], '=', element[dependKey[0]][dependKey[1]]]]
            }
          } else {
            extraFilter = { and: [[depend[0], '=', -1]] }
          }
        }

        let extraCreateStateOptions = undefined
        if (field.extraCreateStateOptions) {
          extraCreateStateOptions = field.extraCreateStateOptions(
            element,
            field.key
          )
        } else if (field.fieldDependency) {
          extraCreateStateOptions = {
            createOptions: {
              convert: {
                schema: property.schema,
                element: element
              }
            }
          }
        }
        const tab = functions.tabs.getTabFromSchemaAndType(
          property.format ? property.format : '',
          'main'
        )

        contentValue = field.key ? element[field.key] : { id: 0 }

        control = (
          <UI.Form.SelectFromSchemaPopup
            value={contentValue}
            onChange={(e) => updateElement(property.key, e)}
            className={controlSize}
            schema={property.format ? property.format : ''}
            fieldKey={field.relKey}
            tab={tab}
            extraFilter={extraFilter}
            extraCreateStateOptions={extraCreateStateOptions}
            disableCreateElement={field.disableCreateElement}
            relKeyExtraSelect={field.relKeyExtraSelect}
          />
        )
      } else if (propertyType === 'bool') {
        control = (
          <UI.Form.BoolField
            value={element[field.key]}
            onChange={(val) => updateElement(property.key, val)}
          />
        )
      } else if (propertyType === 'date') {
        contentValue = element[field.key]
          ? moment(element[field.key]).format('YYYY-MM-DD')
          : undefined

        control = (
          <UI.Form.Date
            value={contentValue}
            onChange={(d) => updateElement(property.key, d)}
            className={'w-28'}
          />
        )
      } else if (propertyType === 'datetime') {
        contentValue = element[field.key]
          ? moment(element[field.key]).format('YYYY-MM-DD HH:mm')
          : undefined

        control = (
          <UI.Form.DateTime
            value={contentValue}
            onChange={(d) => updateElement(property.key, d)}
          />
        )
      } else if (propertyType === 'float') {
        const val: number = element[property.key] ? element[property.key] : 0

        control = (
          <UI.Form.InputFloat
            value={val}
            onChangeFloat={(e) => updateElement(property.key, e)}
            className={controlSize}
          />
        )
      } else if (propertyType === 'number') {
        const val: number = element[property.key] ? element[property.key] : 0

        control = (
          <UI.Form.InputInt
            value={val}
            onChangeInt={(e) => updateElement(property.key, e)}
            className={controlSize}
          />
        )
      } else if (propertyType === 'text') {
        if (property.as === 'rich_editor') {
          control = (
            <UI.Form.RichEditor
              value={contentValue}
              setValue={(e) => updateElement(property.key, e)}
              className={'w-full block'}
            />
          )
        } else {
          control = (
            <UI.Form.TextArea
              value={contentValue}
              onChange={(e) => updateElement(property.key, e.target.value)}
              className={'w-full block'}
              autoRows={true}
              rows={2}
            />
          )
        }
      } else if (propertyType === 'string_array') {
        control = (
          <div>
            <UI.Form.TextArea
              value={Array.isArray(contentValue) ? contentValue.join('\n') : ''}
              onChange={(e) =>
                updateElement(property.key, e.target.value.split('\n'))
              }
              className={'w-full block'}
              autoRows={true}
              rows={2}
            />
            <div className={'text-xs text-gray-400'}>
              {t('Naują reikšmę veskite į naują eilutę')}
            </div>
          </div>
        )
      } else if (propertyType === 'enum_multi_text' && !!property.enum) {
        control = (
          <UI.Form.SelectMulti
            value={contentValue}
            onChange={(e) => updateElement(property.key, e)}
            options={property.enum}
            className={controlSize}
            isMulti={true}
          />
        )
      } else if (propertyType === 'enum_multi_number' && !!property.enum) {
        control = (
          <UI.Form.SelectMulti
            value={contentValue}
            onChange={(e) => updateElement(property.key, e)}
            options={property.enum.map((e: any) => {
              return { ...e, value: parseInt(e.value, 10) }
            })}
            className={controlSize}
            isMulti={true}
          />
        )
      } else if (propertyType === 'enum_text' && !!property.enum) {
        control = (
          <UI.Form.Select
            value={contentValue}
            onChange={(e) => updateElement(property.key, e)}
            options={property.enum}
            className={controlSize}
          />
        )
      } else if (propertyType === 'enum_number' && !!property.enum) {
        control = (
          <UI.Form.Select
            value={contentValue}
            onChange={(e) => updateElement(property.key, e)}
            options={property.enum}
            className={controlSize}
          />
        )
      } else if (propertyType === 'array') {
        const val: any[] = element[property.key] ? element[property.key] : []

        const _schema = property.format ? property.format : ''

        if (field.relListObjFunc) {
          field.relListObj = field.relListObjFunc();
        }

        control = (
          <UI.Form.Array
            title={property.title}
            schema={_schema}
            value={val}
            onChange={(e) => updateElement(property.key, e)}
            tab={
              field.relListObj
                ? field.relListObj
                : { type: 'main', schema: _schema, sort: [], fields: [] }
            }
            parentElement={element}
            disableCreateElement={field.disableCreateElement}
          />
        )
      } else {
        control = (
          <UI.Form.Input
            value={contentValue}
            onChange={(e: any) => updateElement(property.key, e.target.value)}
            className={controlSize}
          />
        )
      }

      const isRequired = required.indexOf(property.key) >= 0

      // const extraClassName = (isRequired ? "bg-red-50 bg-opacity-30 hover:bg-red-200 hover:bg-opacity-100" : "hover:bg-nsecondary-50");

      return (
        <div
          className={`flex ${isCompact ? 'flex-col items-start' : 'space-x-2 items-center'
            } w-full hover:bg-nsecondary-50`}
        >
          {!!property && !field.hideLabel && (
            <label className={`text-nsecondary-600 ${labelSize} text-sm`}>
              {!!property.description && (
                <UI.Form.Tooltip text={property.description} />
              )}
              {property.title}
              {isRequired ? <span className={'text-red-500'}> *</span> : ''}
            </label>
          )}
          <span className={`${isCompact ? 'w-full' : 'flex-grow'}`}>
            {/* {contentValue} */}
            {control}
            {!!field.custom &&
              field.custom.renderAfterField &&
              field.custom.renderAfterField({
                // @ts-ignore
                field: field,
                element: element,
                property: property,
                schema: property.schema,
                updateElement: updateElement
              })}
          </span>
        </div>
      )
    } else if (field.type === 'separator') {
      return <span className={'h-6'}></span>
    } else if (field.type === 'horizontal-separator') {
      return <span className={'w-full flex-grow'}></span>
    } else if (field.type === 'label') {
      return (
        <div
          className={
            'flex space-x-2 w-full items-center hover:bg-nsecondary-50 mt-6'
          }
        >
          <label className={'w-56 text-sm text-nsecondary-600 font-medium'}>
            {field.text}
          </label>
        </div>
      )
    } else if (field.type === 'hint') {
      return (
        <div
          className={
            'flex space-x-2 w-full items-center hover:bg-nsecondary-50 mt-6'
          }
        >
          <p className={'text-sm text-nsecondary-600 font-medium'}>
            {field.text}
          </p>
        </div>
      )
    } else if (field.type === 'tagCloud' && !!field.tagCloud) {
      return (
        <div className={'flex space-x-2 w-full items-center'}>
          <UI.Content.TagCloud
            updateElement={updateElement}
            field={field.tagCloud.field}
            action={field.tagCloud.action}
            val={
              element[field.tagCloud.field] ? element[field.tagCloud.field] : ''
            }
          />
        </div>
      )
    }
    return <div className={'flex space-x-2'}></div>
  }

  const content = (
    <Fragment>
      {element ? (
        <Fragment>
          {editFields.fields.map(
            (fieldRow: INaeFormEditRow, fieldRowIndex: number) => {
              return (
                <div
                  className={'flex space-x-2'}
                  key={'field-row-' + fieldRowIndex}
                >
                  {fieldRow.map((f: INaeEditField, fIndex: number) => {
                    const property = f.key
                      ? functions.properties.getPropertyDataForSchema(props.schema, f.key)
                      : null
                    return (
                      <Fragment
                        key={'field-row-' + fieldRowIndex + '-f-' + fIndex}
                      >
                        {transformEditValue(f, element, property)}
                      </Fragment>
                    )
                  })}
                </div>
              )
            }
          )}
        </Fragment>
      ) : (
        <Fragment />
      )}
    </Fragment>
  )

  UIConfig.resetFieldsToDefValues(
    props.schema,
    element,
    JSON.parse(JSON.stringify(hiddenFields)),
    updateElementBatch
  )

  return (
    <MainEditWrapper
      title={functions.schemas.getSchemaTitle(props.schema, false)}
      element={element}
      onSave={doSave}
      onSaveAndStay={props.onSaveAndStay ? doSaveAndStay : undefined}
      saveLoading={saveDataParams.loading}
      error={saveDataParams.error}
      goBack={props.onBack?() => {props.onBack(false)}:undefined}
      header={props.header}
      schema={props.schema}
      compact={props.compact}
      contentWrap={props.contentWrap}

      saveOnBottom={props.saveOnBottom}
      editContainerClassName={props.editContainerClassName}
    >
      {content}
    </MainEditWrapper>
  )
}
