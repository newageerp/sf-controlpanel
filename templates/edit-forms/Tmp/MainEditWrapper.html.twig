import React, { Fragment } from 'react'
import { useTranslation } from 'react-i18next'
import { isMobile } from 'react-device-detect'
import { UI } from '@newageerp/nae-react-ui'
import { WideToolbar } from '@newageerp/ui.form.base.form-pack'

export enum EditHeaderType {
    show = 'Show',
    showToolbar = 'ShowAsToolbar',
    hide = 'Hide'
}

interface Props {
    element: any
    schema?: string
    title: string
    children?: any

    onSave?: () => void
    onSaveAndStay?: () => void
    saveLoading?: boolean

    disableBack?: boolean

    error?: any

    goBack?: () => void

    compact?: boolean

    header: EditHeaderType
    contentWrap?: any

    saveOnBottom?: boolean,
    editContainerClassName?: string,
}

export default function MainEditWrapper(props: Props) {
    const { element, title, children } = props

    const { t } = useTranslation()

    const goBack = () => {
        // if (isPopup) {
        //     if (onClose) {
        //         onClose();
        //     }
        // } else {
        //     history.goBack();
        // }
        // history.goBack()
        if (props.goBack) {
            props.goBack()
        }
    }

    const isCompact = isMobile || props.compact || props.saveOnBottom;

    const WrapComponent = props.contentWrap ? props.contentWrap : UI.Card.WhiteCard


    return (
        <Fragment>
            {element ? (
                <div className={`tw3-space-y-4 tw3-max-w-[1200px] tw3-mx-auto ${props.editContainerClassName ? props.editContainerClassName : ''}`}>

                    <div className={'tw3-space-y-2'}>
                        {children}
                    </div>

                    <WideToolbar onSave={props.onSave} onCancel={props.goBack} onExtraSave={props.onSaveAndStay} size={props.compact ? 'base' : 'xl'} />
                    {!!props.error && <UI.Form.ErrorAlert error={props.error} />}

                    <UI.Widget.Widget
                        type={UI.Widget.WidgetType.editRight}
                        element={element}
                        schema={props.schema ? props.schema : '-'}
                        saveError={props.error}
                    />
                </div>
            ) : (
                <Fragment />
            )}
        </Fragment>
    )
}
