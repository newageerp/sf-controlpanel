import React, { useEffect, useState, useRef } from "react";
import { useTranslation } from "react-i18next";
import TP_TABLE_COMP_NAME from "../tables/TP_TABLE_COMP_NAME"
import { OpenApi } from '@newageerp/nae-react-auth-wrapper';
import { functions } from '@newageerp/nae-react-ui';
import { PageContainer, PageContainerMarginTop } from '@newageerp/ui.paging.base.page-container'
import { SearchToolbar, SearchToolbarMarginBottom } from '@newageerp/ui.components.list.search-toolbar'
import { SortingItem } from '@newageerp/ui.components.list.sort-controller';
import { useHistory } from 'react-router-dom'

interface Props {
    navigate?: (schema: string, id: number | string, el: any) => void,
    dataProcessing?: (data: any[]) => any[],
    relId?: number,
    hideSearchBar?: boolean
}

export default function TP_COMP_NAME(props: Props) {
    const history = useHistory()

    const otherTabs = TP_OTHER_TABS;

    const headerRef = useRef(null)
    const scrollToHeader = () => {
        if (headerRef && headerRef.current) {
            // @ts-ignore
            headerRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' })
        }
    }

    const pageSize = TP_PAGE_SIZE;

    const sort = TP_SORT;

    const defaultState = {
        page: 1,
        sort: sort,
        quickSearch: '',
    }

    const isCreatable = TP_CREATABLE;

    const quickSearchFields : any = TP_QUICK_SEARCH;
    const predefinedFilter : any = TP_FILTER;
    const relFilter : any = TP_REL_FILTER;

    const [dataState, setDateState] = useState(defaultState);

    const setActivePage = (page: number) => {
        if (page !== dataState.page) {
            const _state = JSON.parse(JSON.stringify(dataState));
            _state.page = page;
            setDateState(_state);
        }
    }

    const setQuickSearch = (s: string) => {
        if (s !== dataState.quickSearch) {
            const _state = JSON.parse(JSON.stringify(dataState));
            _state.page = 1;
            _state.quickSearch = s;
            setDateState(_state);
        }
    }

    const setSort = (sort: SortingItem[]) => {
        if (sort !== dataState.sort) {
            const _state = JSON.parse(JSON.stringify(dataState));
            _state.page = 1;
            _state.sort = sort;
            setDateState(_state);
        }
    }

    const tab = functions.tabs.getTabFromSchemaAndType('TP_SCHEMA', 'TP_TYPE');
    const fieldsToReturn = functions.tabs.getTabFieldsToReturn(tab);

    const [getData, dataResult] = OpenApi.useUList('TP_SCHEMA', fieldsToReturn);
    const { t } = useTranslation();

    const navigate = (schema: string, id: number | string, el: any) => {
        if (props.navigate) {
            props.navigate(schema, id, el);
        } else {
            history.push(`/u/${schema}/main/view/${id}`);
        }
    }

    const navigateToTab = (type: string) => {
        history.push(`/u/TP_SCHEMA/${type}/list`)
    }

    const onCreate = () => {
        history.push('/u/TP_SCHEMA/main/edit/new')
    }

    const loadData = () => {

        let _filter: any = [{ and: [] }]
        if (!!predefinedFilter) {
            _filter[0]['and'].push(predefinedFilter);
        }
        if (!!relFilter) {
            _filter[0]['and'].push(relFilter);
        }

        if (quickSearchFields && !!dataState.quickSearch) {
            let _or: any = quickSearchFields.map((s: any) => {
                if (typeof s === 'string') {
                    return [s, 'contains', dataState.quickSearch, true]
                }
                return [
                    s.key,
                    s.method ? s.method : 'contains',
                    dataState.quickSearch,
                    s.directSelect
                ]
            })
            _filter[0]['and'].push({ or: _or })
        }


        let filter = _filter[0]['and'].length > 0 ? _filter : []

        getData(
            filter,
            dataState.page,
            pageSize,
            dataState.sort.filter((s: SortingItem) => s.key !== ''),
        );
    }
    useEffect(loadData, [dataState]);

    useEffect(scrollToHeader, [dataResult.data.data]);

    const records = dataResult.data.records;
    const pages = Math.ceil(records / pageSize);

    const dataProcessing = (data: any[]) => {
        if (props.dataProcessing) {
            return props.dataProcessing(data);
        }
        return data;
    }

    const dataToRender = dataProcessing(dataResult.data.data);

    return (
        <div ref={headerRef}>
            {!props.hideSearchBar &&
                <SearchToolbar
                    onCreate={isCreatable?onCreate:undefined}
                    search={
                        {
                          searchValue: dataState.quickSearch,
                          onSearch: setQuickSearch
                        }
                    }
                    sort={
                        {
                          onSort: setSort,
                          sort: dataState.sort,
                          defaultSort: sort,
                          schema: 'TP_SCHEMA'
                        }
                    }
                    marginBottom={SearchToolbarMarginBottom['40px']}
                    tabSwitch={
                        otherTabs?
                        {
                            options: otherTabs,
                            currentTab: 'TP_TYPE',
                            onTabSwitch: navigateToTab
                        }:
                        undefined
                    }
                />
            }
            <div className="overflow-x-auto">
                <TP_TABLE_COMP_NAME
                    data={dataToRender}
                    doReload={loadData}
                    className={`${dataResult.loading?'tw3-animate-pulse':''}`}
                    navigate={navigate}
                />
            </div>
            <PageContainer pages={pages} activePage={dataState.page} setActivePage={setActivePage} marginTop={PageContainerMarginTop['42px']} />
        </div>
    )
}